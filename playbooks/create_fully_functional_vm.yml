---
- name: Créer une VM 100% fonctionnelle avec SSH et QEMU Agent
  hosts: proxmox_server
  gather_facts: false
  vars_files:
    - ../secret_vars.yml
    - ../vm_config.example.yml

  vars:
    # --- PARAMÈTRES DE LA NOUVELLE VM (MODIFIEZ ICI) ---
    new_vm_id: 810  # Choisissez un ID non utilisé
    new_vm_name: "deploy-vm"
    new_vm_ip: "10.0.1.10" # Choisissez une IP libre sur vmbr1
    new_vm_gateway: "10.0.1.1"

    template_to_clone: "ubuntu-2204-template-base" # Nom de votre template
    proxmox_node: "pve"
    proxmox_storage: "local-lvm"
    proxmox_bridge: "vmbr1"
    cores: 2
    memory: 2048 # en Mo
    # --- FIN DES PARAMÈTRES ---

    # Clé SSH publique pour connexion sans mot de passe (recommandé)
    # La commande `lookup` lit le contenu du fichier sur la machine qui LANCE ansible.
    ssh_public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

  tasks:
    - name: Afficher le plan de création
      ansible.builtin.debug:
        msg:
          - "Création de la VM '{{ new_vm_name }}' (ID: {{ new_vm_id }}) en cours..."
          - "IP: {{ new_vm_ip }}, Gateway: {{ new_vm_gateway }}"
          - "Basée sur le template: {{ template_to_clone }}"

    - name: Vérifier si la VM existe déjà
      ansible.builtin.command: "qm status {{ new_vm_id }}"
      register: vm_check
      failed_when: false
      changed_when: false

    - name: Échouer si la VM existe déjà
      ansible.builtin.fail:
        msg: "La VM {{ new_vm_id }} ('{{ vm_check.stdout.split(':')[1] | trim }}') existe déjà. Veuillez choisir un autre ID."
      when: vm_check.rc == 0

    - name: Créer et configurer la VM avec Cloud-Init
      community.proxmox.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_api_password }}"
        api_host: "{{ proxmox_host }}"
        node: "{{ proxmox_node }}"
        
        # Clonage
        clone: "{{ template_to_clone }}"
        newid: "{{ new_vm_id }}"
        name: "{{ new_vm_name }}"
        
        # Matériel
        cores: "{{ cores }}"
        memory: "{{ memory }}"
        
        # Réseau et Cloud-Init
        net:
          net0: "virtio,bridge={{ proxmox_bridge }}"
        ipconfig:
          ipconfig0: "ip={{ new_vm_ip }}/24,gw={{ new_vm_gateway }}"
        
        # Utilisateur et mot de passe via Cloud-Init
        ciuser: "{{ vm_user }}"
        cipassword: "{{ vm_password }}"
        sshkeys: "{{ ssh_public_key }}"

        # Script Cloud-Init pour installer les paquets essentiels
        cicustom: |
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - qemu-guest-agent
            - openssh-server
          runcmd:
            - [ systemctl, enable, --now, qemu-guest-agent ]
            - [ systemctl, enable, --now, ssh ]
            - [ sed, -i, 's/^#?PasswordAuthentication .*/PasswordAuthentication yes/', /etc/ssh/sshd_config ]
            - [ systemctl, restart, sshd ]
        
        timeout: 600 # Attendre jusqu'à 10 minutes pour la création

    - name: Démarrer la nouvelle VM
      community.proxmox.proxmox_kvm:
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_api_password }}"
        api_host: "{{ proxmox_host }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ new_vm_id }}"
        state: started

    - name: Attendre que l'agent QEMU soit prêt
      ansible.builtin.command: "qm guest exec {{ new_vm_id }} -- /bin/true"
      register: agent_status
      until: agent_status.rc == 0
      retries: 60  # Attendre jusqu'à 5 minutes
      delay: 5
      changed_when: false

    - name: Afficher le rapport final
      ansible.builtin.debug:
        msg: |
          ===============================================================
          VM '{{ new_vm_name }}' ({{ new_vm_id }}) CRÉÉE ET PRÊTE !
          ===============================================================
          L'agent QEMU est actif et le serveur SSH est configuré.
          
          Adresse IP : {{ new_vm_ip }}
          Utilisateur : {{ vm_user }}
          
          Pour vous connecter avec votre clé SSH (recommandé) :
          ssh {{ vm_user }}@{{ new_vm_ip }}
          
          Pour vous connecter via votre VM de rebond (proxy-vm) :
          ssh -J {{ vm_user }}@<IP_DU_PROXY_VM> {{ vm_user }}@{{ new_vm_ip }}
          
          Pour vous connecter avec un mot de passe :
          ssh {{ vm_user }}@{{ new_vm_ip }}
          (Le mot de passe est celui défini dans vos secrets)
          ===============================================================
      vars:
        # Tente de trouver l'IP du proxy-vm si elle est définie
        proxy_vm_ip_query: "{{ vms | selectattr('name', 'equalto', 'proxy-vm') | map(attribute='ip') | first | default('<IP_DU_PROXY_VM>') }}" 